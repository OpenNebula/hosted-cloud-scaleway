on:
  workflow_dispatch:
    inputs:
      customer_name:
        required: true
        type: string
        default: 'opennebula'
      project_name:
        required: true
        type: string
        default: 'scw'
      SCW_DEFAULT_REGION:
        required: true
        type: choice
        default: 'fr-par'
        options:
        - fr-par
        - nl-ams
        - pl-waw
      SCW_DEFAULT_ZONE_NUMBER:
        required: true
        type: choice
        options:
        - 1
        - 2
        - 3
        default: '1'
      scw_infrastructure_project_name:
        required: true
        type: string
        default: 'infra'
      environment:
        required: true
        type: string

jobs:
  init-test-project-exists:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    container:
      image: scaleway/cli:latest
    env: 
      TF_VAR_customer_name:  ${{ inputs.customer_name }}
      TF_VAR_project_name: ${{ inputs.project_name }}
      SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
      SCW_DEFAULT_ORGANIZATION_ID:  ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
      SCW_DEFAULT_REGION: ${{ inputs.SCW_DEFAULT_REGION }}
      SCW_DEFAULT_ZONE:  ${{ inputs.SCW_DEFAULT_REGION }}-${{ inputs.SCW_DEFAULT_ZONE_NUMBER }}
      TF_VAR_scw_infrastructure_project_name: '{ scw_infrastructure_project_name = "${{ inputs.scw_infrastructure_project_name }}"}'
      project_full_name: "${{ inputs.customer_name }}-${{ inputs.project_name }}-${{ inputs.scw_infrastructure_project_name }}"
      tfstate: "${{ inputs.customer_name }}-${{ inputs.project_name }}-${{ inputs.scw_infrastructure_project_name }}-tfstates"
    steps:
      - name: Assert projects exists
        run:  |
           export project_id=`/scw account project list name=$project_full_name| grep $project_full_name  | cut -d" " -f1`
           test -z $project_id && exit 1 
           /scw iam api-key update $SCW_ACCESS_KEY default-project-id=$project_id
           /scw object bucket get $tfstate

